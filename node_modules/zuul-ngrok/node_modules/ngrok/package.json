{
  "name": "ngrok",
  "version": "0.2.2",
  "description": "node wrapper for ngrok",
  "main": "index.js",
  "scripts": {
    "test": "node ./node_modules/mocha/bin/_mocha",
    "postinstall": "node ./postinstall.js",
    "postupdate": "node ./postinstall.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bubenshchykov/ngrok.git"
  },
  "keywords": [
    "ngrok",
    "localhost",
    "tunneling",
    "localtunnel",
    "webhook"
  ],
  "author": {
    "name": "bubenshchykov"
  },
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/bubenshchykov/ngrok/issues"
  },
  "devDependencies": {
    "mocha": "~1.14.0",
    "chai": "~1.8.1"
  },
  "dependencies": {
    "async": "^0.9.0",
    "decompress-zip": "0.1.0",
    "lock": "^0.1.2",
    "node-uuid": "^1.4.3",
    "request": "^2.55.0"
  },
  "bin": {
    "ngrok": "./bin/ngrok"
  },
  "readme": "ngrok [![Build Status](https://travis-ci.org/bubenshchykov/ngrok.png?branch=master)](https://travis-ci.org/bubenshchykov/ngrok)\n=====\n\n![alt ngrok.com](https://ngrok.com/static/img/overview.png)\n\nNgrok exposes your localhost to the web. https://ngrok.com/\n\nusage\n===\n\n[![NPM](https://nodei.co/npm/ngrok.png?global=true&&downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/ngrok/)\n\nIt will download the ngrok 2.0 binary for your platform and put it into the bin folder. You can also install ngrok globally and use it directly from bash\n```shell\n$ npm install ngrok -g\n$ ngrok http 8080\n```\n\n## authtoken\n*Attention, authtoken is required now because of tricky ngrok [bug #27](https://github.com/bubenshchykov/ngrok/issues/27).* Please go to ngrok 2.0 dashboard to obtain an authtoken. The one for ngrok 1.0 won't work. Many advanced features of the ngrok.com service require an authtoken, so it's a good thing anyway. As alternative, use module version 0.1.99 which uses ngrok 1.0 and doesn't require an authtoken.\n\nYou can pass it as option with each ```connect``` or set it once for further tunnels\n```javascript\nngrok.authtoken(token, function(err, token) {});\n```\n\n## connect\n```javascript\nvar ngrok = require('ngrok');\n\nngrok.connect(function (err, url) {}); // https://757c1652.ngrok.io -> http://localhost:80\nngrok.connect(9090, function (err, url) {}); // https://757c1652.ngrok.io -> http://localhost:9090\nngrok.connect({proto: 'tcp', addr: 22}, function (err, url) {}); // tcp://0.tcp.ngrok.io:48590\nngrok.connect(opts, function(err, url) {});\n```\nFirst connect spawns the ngrok process so each next tunnel is created much faster.\n\n## options\n```javascript\nngrok.connect({\n\tproto: 'http', // http|tcp|tls\n\taddr: 8080, // port or network address\n\tauth: 'user:pwd', // http basic authentication for tunnel\n\tsubdomain: 'alex', // reserved tunnel name https://alex.ngrok.io,\n\tauthtoken: '12345' // your authtoken from ngrok.com\n}, function (err, url) {});\n```\n\nOther options: `name, inspect, host_header, bind_tls, hostname, crt, key, client_cas, remote_addr` - read [here](https://ngrok.com/docs)\n\n## disconnect\nThe ngrok and all tunnels will be killed when node process is done. To stop the tunnels use\n```javascript\nngrok.disconnect(url); // stops one\nngrok.disconnect(); // stops all\nngrok.kill(); // kills ngrok process\n```\n\n## emitter\nAlso you can use ngrok as an event emitter, it fires \"connect\", \"disconnect\" and \"error\" events\n```javascript\nngrok.once('connect', function (url) {};\nngrok.connect(port);\n```\n\n## configs\nYou can use ngrok's [configurations files](https://ngrok.com/docs#config), then just pass `name` option when making a tunnel\n```\nOS X\t/Users/example/.ngrok2/ngrok.yml\nLinux\t/home/example/.ngrok2/ngrok.yml\nWindows\tC:\\Users\\example\\.ngrok2\\ngrok.yml\n```\n\n## inspector\nWhen tunnel is established you can use the ngrok interface http://127.0.0.1:4040 to inspect the webhooks done via ngrok.\n",
  "readmeFilename": "README.md",
  "_id": "ngrok@0.2.2",
  "_from": "ngrok@0.2.2"
}
